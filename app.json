[{"name":"app.R","content":"library(shiny)\n\n# --- Precompute 100 effect curves\nn_frames <- 100\nx_vals <- seq(0, 10, length.out = 200)\neffects <- lapply(1:n_frames, function(i) {\n  y <- sin(x_vals + i / 5)  # example effect\n  list(x = x_vals, y = y)\n})\n\n# --- Shiny app\nui <- fluidPage(\n  actionButton(\"start\", \"Start Animation\"),\n  actionButton(\"stop\", \"Stop Animation\"),\n  plotOutput(\"effectPlot\")\n)\n\nserver <- function(input, output, session) {\n  # Frame counter\n  frame <- reactiveVal(1)\n  running <- reactiveVal(FALSE)\n  \n  # Timer for animation\n  autoInvalidate <- reactiveTimer(100)  # update every 100 ms\n  \n  observe({\n    if (running()) autoInvalidate()\n    isolate({\n      if (running()) {\n        new_frame <- frame() + 1\n        frame(ifelse(new_frame > n_frames, 1, new_frame))\n      }\n    })\n  })\n  \n  observeEvent(input$start, {\n    running(TRUE)\n  })\n  \n  observeEvent(input$stop, {\n    running(FALSE)\n  })\n  \n  output$effectPlot <- renderPlot({\n    f <- frame()\n    plot(effects[[f]]$x, effects[[f]]$y,\n         type = \"l\", lwd = 2, col = \"black\",\n         xlab = \"x\", ylab = \"Effect\",\n         ylim = c(-1.5, 1.5))\n    title(main = paste(\"Frame\", f))\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
